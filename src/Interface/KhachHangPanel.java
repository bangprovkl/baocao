/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import database.Connect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nhi
 */
public class KhachHangPanel extends javax.swing.JPanel {

    /**
     * Creates new form KhachHangPanel
     */
    public KhachHangPanel() {
        initComponents();
    }
    private void Showtable() {
        try {
        KhachHangTable.removeAll();
        String[] arr ={"Mã khách hàng","Tên khách hàng","Giới tính","địa chỉ","số điên thoại"};
        DefaultTableModel model =new DefaultTableModel(arr,0);
        Connection connection = Connect.getConnection();
        String query = "SELECT * FROM `khachhang`";
        PreparedStatement ps =connection.prepareStatement(query);
        ResultSet rs =ps.executeQuery();
        while (rs.next()) {
            Vector vector =new Vector();
            vector.add(rs.getString("maKH"));
            vector.add(rs.getString("tenKH"));
            vector.add(rs.getString("gioitinh"));
            vector.add(rs.getString("diachi"));
            vector.add(rs.getString("sdt"));
            model.addRow(vector);
        }
        Connect.closeConnection(connection);
        KhachHangTable.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(KhachHangPanel.class.getName()).log(Level.SEVERE,null,ex);
        }
    }
    public void EnableTrue(){
        txtMaKH.setEnabled(true);
        txtTenKH.setEnabled(true);
        txtDiaChi.setEnabled(true);
        txtSdt.setEnabled(true);
   }
    public void EnableFalse(){
        txtMaKH.setEnabled(false);
        txtTenKH.setEnabled(false);
        txtDiaChi.setEnabled(false);
        txtSdt.setEnabled(false);
    }
    public void EqualsNull(){
        txtMaKH.setText("");
        txtTenKH.setText("");
        txtDiaChi.setText("");
        txtSdt.setText("");
    }
    private boolean CheckTrung(){
        try {
            Connection connection = Connect.getConnection();
            String sql = "SELECT * FROM `khachhang` WHERE `maKH` = ? ";
            PreparedStatement ps =connection.prepareStatement(sql);
            ps.setString(1,txtMaKH.getText());
            ResultSet rs =ps.executeQuery();
            while (rs.next()){
                return true;
            }
        Connect.closeConnection(connection);
        } catch (SQLException ex) {
            Logger.getLogger(CapNhatSanPhamPanel.class.getName()).log(Level.SEVERE,null,ex);
        }
        return false;
    }
    private boolean CheckTrungAllbtnSua(){
        try {
            Connection connection = Connect.getConnection();
            String sql = "SELECT * FROM `khachhang` WHERE `tenKH`=? AND `gioitinh`=? AND `diachi`=? AND `sdt`=? ";
            PreparedStatement ps =connection.prepareStatement(sql);
             ps.setString(1,txtTenKH.getText());
            if (radNam.isSelected()==true) {
                    ps.setString(2,"Nam");
            }else if (radNu.isSelected()==true) {
                    ps.setString(2,"Nữ");
                }
            ps.setString(3,txtDiaChi.getText());
            ps.setString(4,txtSdt.getText());
            ResultSet rs =ps.executeQuery();
            while (rs.next()){
                return true;
            }
            Connect.closeConnection(connection);
        } catch (SQLException ex) {
            Logger.getLogger(CapNhatSanPhamPanel.class.getName()).log(Level.SEVERE,null,ex);
            }
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDiaChi = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        KhachHangTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnSua = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnXoa = new javax.swing.JButton();
        txtMaKH = new javax.swing.JTextField();
        txtTenKH = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtSdt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        radNu = new javax.swing.JRadioButton();
        radNam = new javax.swing.JRadioButton();
        btnRefresh = new javax.swing.JButton();
        btnLuu = new javax.swing.JButton();
        comboboxTimKiem = new javax.swing.JComboBox<>();
        txtTukhoa = new javax.swing.JTextField();
        btnTimkiem = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(3500, 3500));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(txtDiaChi, new org.netbeans.lib.awtextra.AbsoluteConstraints(799, 95, 153, -1));

        KhachHangTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã khách hàng", "Tên khách hàng", "Địa chỉ", "giới tính", "Số điện thoại"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        KhachHangTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KhachHangTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(KhachHangTable);
        if (KhachHangTable.getColumnModel().getColumnCount() > 0) {
            KhachHangTable.getColumnModel().getColumn(0).setResizable(false);
            KhachHangTable.getColumnModel().getColumn(1).setResizable(false);
            KhachHangTable.getColumnModel().getColumn(2).setResizable(false);
            KhachHangTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 1350, 190));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Địa chỉ:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(747, 96, -1, -1));

        btnSua.setBackground(new java.awt.Color(126, 146, 182));
        btnSua.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        add(btnSua, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 180, -1, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Mã khách hàng:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 96, -1, -1));

        btnXoa.setBackground(new java.awt.Color(126, 146, 182));
        btnXoa.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        add(btnXoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 180, -1, -1));
        add(txtMaKH, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 95, 115, -1));
        add(txtTenKH, new org.netbeans.lib.awtextra.AbsoluteConstraints(429, 95, 131, -1));

        btnThem.setBackground(new java.awt.Color(126, 146, 182));
        btnThem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        add(btnThem, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, -1, -1));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Tên khách hàng:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 96, -1, -1));
        add(txtSdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1073, 95, 118, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Số điện thoại:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(984, 96, -1, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Giới tính:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(578, 96, -1, -1));

        radNu.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        radNu.setText("Nữ");
        add(radNu, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 117, -1, -1));

        radNam.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        radNam.setText("Nam");
        add(radNam, new org.netbeans.lib.awtextra.AbsoluteConstraints(659, 94, -1, -1));

        btnRefresh.setBackground(new java.awt.Color(126, 146, 182));
        btnRefresh.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 180, -1, 33));

        btnLuu.setBackground(new java.awt.Color(126, 146, 182));
        btnLuu.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });
        add(btnLuu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 180, -1, 33));

        comboboxTimKiem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        comboboxTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã KH", "Tên KH", "Giới tính", "Địa chỉ", "Sdt" }));
        add(comboboxTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(642, 176, 90, 33));

        txtTukhoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTukhoaActionPerformed(evt);
            }
        });
        add(txtTukhoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(738, 182, 123, -1));

        btnTimkiem.setBackground(new java.awt.Color(126, 146, 182));
        btnTimkiem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnTimkiem.setText("Tìm kiếm");
        btnTimkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimkiemActionPerformed(evt);
            }
        });
        add(btnTimkiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(879, 176, -1, 33));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel5.setText("QUẢN LÝ KHÁCH HÀNG");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void KhachHangTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KhachHangTableMouseClicked
        btnSua.setEnabled(true);
        btnXoa.setEnabled(true);
        btnThem.setEnabled(true);
        btnLuu.setEnabled(false);
        btnTimkiem.setEnabled(false);
        EnableFalse();
        int i = KhachHangTable.getSelectedRow();
        DefaultTableModel dtm =(DefaultTableModel) this.KhachHangTable.getModel();
        String maKHString = (String)dtm.getValueAt(i, 0);
        String tenKHString = (String)dtm.getValueAt(i, 1);
        String gioitinhString = (String)dtm.getValueAt(i, 2);
        String diachiString = (String)dtm.getValueAt(i, 3);
        String sdtString = (String)dtm.getValueAt(i, 4);
        
        this.txtMaKH.setText(maKHString);
        this.txtTenKH.setText(tenKHString);
        if(gioitinhString.equals("Nam") || gioitinhString.equals("nam")){
            this.radNam.setSelected(true);
            this.radNu.setSelected(false);
        }else if(gioitinhString.equals("Nữ") || gioitinhString.equals("nữ") ||  gioitinhString.equals("nữ")){
            this.radNu.setSelected(true);
            this.radNam.setSelected(false);
        }
        this.txtDiaChi.setText(diachiString);
        this.txtSdt.setText(sdtString);
        
    }//GEN-LAST:event_KhachHangTableMouseClicked

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        btnLuu.setEnabled(true);
        btnThem.setEnabled(false);
        btnXoa.setEnabled(false);
        EnableTrue();
        txtMaKH.setEnabled(false);
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        btnThem.setEnabled(false);
        btnSua.setEnabled(false);
        btnLuu.setEnabled(true);
        EnableFalse();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        EnableTrue();
        EqualsNull();
        btnLuu.setEnabled(true);
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        //them
        if (btnThem.isEnabled()==true && btnSua.isEnabled()==false && btnXoa.isEnabled()==false) {
            if (txtMaKH.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Chưa nhập: Mã khách hàng");
            txtMaKH.requestFocus();
            return;
        }else if(txtTenKH.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Chưa nhập: Tên khách hàng");
            txtTenKH.requestFocus();
            return;
        }else if(!radNam.isSelected() &&  !radNu.isSelected()){
            JOptionPane.showMessageDialog(null,"Chưa chọn: Giới tính");
            radNam.requestFocus();
            radNu.requestFocus();
            return;
        }else if(radNam.isSelected() &&  radNu.isSelected()){
            JOptionPane.showMessageDialog(null,"Mời chọn: Giới tính");
            radNam.requestFocus();
            radNu.requestFocus();
            return;
        }
        else if(txtDiaChi.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Chưa nhập: Địa chỉ");
            txtSdt.requestFocus();
            return;
        }
        else if(txtSdt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Chưa nhập: Số điện thoại");
            txtSdt.requestFocus();
            return;
        }
        if (CheckTrung()==true) {
            JOptionPane.showMessageDialog(null,"Mã khách hàng đã trùng !");
            txtMaKH.requestFocus();
            return;
        }else{
            try {
                Connection connection = Connect.getConnection();
            String input_sql = "INSERT INTO `khachhang` (`maKH`, `tenKH`, `gioitinh`, `diachi`,`sdt`) VALUES (?,?,?,?,?)";
            PreparedStatement ps =connection.prepareStatement(input_sql);
            ps.setString(1,txtMaKH.getText());
            ps.setString(2,txtTenKH.getText());
            if (radNam.isSelected()) {
                    ps.setString(3,"Nam");
            }else if (radNu.isSelected()) {
                    ps.setString(3,"Nữ");
                }
            ps.setString(4,txtDiaChi.getText());
            ps.setString(5,txtSdt.getText());
            ps.executeUpdate();
            Connect.closeConnection(connection);
            Showtable();
            JOptionPane.showMessageDialog(null,"Thêm thành công");
            btnLuu.setEnabled(false);
            } catch (SQLException ex) {
                Logger.getLogger(CapNhatSanPhamPanel.class.getName()).log(Level.SEVERE,null,ex);
            }
        }
        }
        //sua
        if (btnThem.isEnabled()==false && btnSua.isEnabled()==true && btnXoa.isEnabled()==false ) {
             int i = KhachHangTable.getSelectedRow();
        if (i<0) {
            JOptionPane.showMessageDialog(this,"Chưa chọn khách hàng cần sửa!");
            return;
        }
        DefaultTableModel dtm =(DefaultTableModel) this.KhachHangTable.getModel();
        //lay du lieu dong i, cot 0 ( mã sp)
        String masp = (String)dtm.getValueAt(i, 0);
            String maKHNew = this.txtMaKH.getText();
            String tenKHNew = this.txtTenKH.getText();
            if (radNam.isSelected()) {
                String gioitinhNew = "Nam";
            }else if (radNu.isSelected()) {
                String gioitinhNew = "Nữ";
                }
            String diachiNew = this.txtDiaChi.getText();
            String sdtNew = this.txtSdt.getText();
            if(txtTenKH.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Chưa nhập: Tên khách hàng");
            txtTenKH.requestFocus();
            return;
            }else if(txtDiaChi.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Chưa nhập: Địa chỉ");
            txtDiaChi.requestFocus();
            return;
            }else if(txtSdt.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null,"Chưa nhập: Số điện thoại");
            txtSdt.requestFocus();
            return;
               }
            if(radNam.isSelected()==false &&  radNu.isSelected()==false){
            JOptionPane.showMessageDialog(null,"Mời chọn: Giới tính");
            radNam.requestFocus();
            radNu.requestFocus();
            return;
           }else if (radNam.isSelected()==true &&  radNu.isSelected()==true){
            JOptionPane.showMessageDialog(null,"Mời chọn: Giới tính");
            radNam.requestFocus();
            radNu.requestFocus();
            return;
           }
            if (CheckTrungAllbtnSua()==true) {
                JOptionPane.showMessageDialog(null, "Khách hàng chưa được sửa thông tin");
                return;
            }
            //hoi lại
            int res = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn sửa?","Sửa thông tin khách hàng",
                                                JOptionPane.YES_NO_OPTION);
            if (res==JOptionPane.YES_OPTION) {
            Connection connection = Connect.getConnection();
            if(connection==null){
                JOptionPane.showMessageDialog(this,"Lỗi kết nối CSDL !");
                return;
            }
            //truy van SQL
            String sql = "UPDATE `khachhang` SET `maKH`=?,`tenKH`=?,`gioitinh`=?,`diachi`=?,`sdt`=? WHERE `maKH`=?";
            try {
                PreparedStatement ps =  connection.prepareStatement(sql);
                ps.setString(1,maKHNew);
                ps.setString(2,tenKHNew);
               if (radNam.isSelected()) {
                    ps.setString(3,"Nam");
            }else if (radNu.isSelected()) {
                    ps.setString(3,"Nữ");
                }
                ps.setString(4,diachiNew);
                ps.setString(5,sdtNew);
                ps.setString(6,maKHNew);
                
                int n= ps.executeUpdate();//thực hiện sql và trả về số dòng dươc thư hien
                if (n>0) {
                    JOptionPane.showMessageDialog(this,"Sửa thông tin thành công!");
                    Showtable();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,"Lỗi SQL!");
                Logger.getLogger(CapNhatSanPhamPanel.class.getName()).log(Level.SEVERE,null,ex);
                }
            }
            
        }
        //xoa 
         if (btnThem.isEnabled()==false && btnSua.isEnabled()==false && btnXoa.isEnabled()==true ) {
           int i = KhachHangTable.getSelectedRow();
            if (i<0) {
            JOptionPane.showMessageDialog(this,"Bạn chưa chọn khách hàng cần xóa!");
            return;
            }
            String data =KhachHangTable.getModel().getValueAt(i,0).toString();
            int res = JOptionPane.showConfirmDialog(this,  "Bạn có chắc muốn xóa?","Xóa thông tin khách hàng",
                                                JOptionPane.YES_NO_OPTION);
            if (res==JOptionPane.YES_OPTION) {
                Connection connection = Connect.getConnection();
                if(connection==null){
                    JOptionPane.showMessageDialog(this,"Lỗi kết nối CSDL!");
                    return;
                }
                try {
                String delsql = "DELETE FROM `khachhang` WHERE `maKH`= ?";
                PreparedStatement ps =connection.prepareStatement(delsql);
                ps.setString(1,data);
                ps.executeUpdate();
                Connect.closeConnection(connection);
                Showtable();
                JOptionPane.showMessageDialog(null,"Xóa thành công");
                } catch (SQLException ex) {
                Logger.getLogger(CapNhatSanPhamPanel.class.getName()).log(Level.SEVERE,null,ex);
                }
            }
         }
        btnSua.setEnabled(false);
        btnLuu.setEnabled(false);
        btnXoa.setEnabled(false);
        EnableFalse();
        EqualsNull();
        btnThem.setEnabled(true);
        
    }//GEN-LAST:event_btnLuuActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Showtable();
        btnTimkiem.setEnabled(false);
        EnableFalse();
        EqualsNull();
        
        txtTukhoa.setText("");
        btnLuu.setEnabled(false);
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
        btnThem.setEnabled(true);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        Showtable();
        EnableFalse();
        btnLuu.setEnabled(false);
        btnSua.setEnabled(false);
        btnXoa.setEnabled(false);
    }//GEN-LAST:event_formComponentShown

    private void btnTimkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimkiemActionPerformed
        String tukhoa = this.txtTukhoa.getText();
        Connection connection = Connect.getConnection();
        if(connection==null){//ketnoi that bai
            JOptionPane.showMessageDialog(this,"Lỗi kết nối CSDL!");
            return;
        }else{
            String sql = "SELECT * FROM khachhang ";
            if(txtTukhoa.getText().equals("")==false){// neu tu khóa k trống thì cộng thêm
                String data =comboboxTimKiem.getSelectedItem().toString();
                
                if (data=="Mã KH") {
                    sql += "WHERE `maKH` LIKE '%"+tukhoa+"%'";
                }
                if (data=="Tên KH") {
                    sql += "WHERE `tenKH` LIKE '%"+tukhoa+"%'";
                }
                if (data=="Giới tính") {
                    sql += "WHERE `gioitinh` LIKE '%"+tukhoa+"%'";
                }
                if (data=="Địa chỉ") {
                    sql += "WHERE `diachi` LIKE '%"+tukhoa+"%'";
                }
                if (data=="Sdt") {
                    sql += "WHERE `sdt` LIKE '%"+tukhoa+"%'";
                }
            }
            try {
                PreparedStatement ps =connection.prepareStatement(sql);
                ResultSet rs =ps.executeQuery(sql);
                DefaultTableModel dtm =(DefaultTableModel) this.KhachHangTable.getModel();
                dtm.setRowCount(0);
                int dem =0;
                while (rs.next()){
                    String mahk =rs.getString("maKH");
                    String tenkh =rs.getString("tenKH");
                    String gioitinh =rs.getString("gioitinh");
                    String diachi =rs.getString("diachi");
                    String sdt =rs.getString("sdt");
                     
                    dtm.addRow(new Object[] {mahk,tenkh,gioitinh,diachi,sdt});
                    dem++;
                }
                if (dem==0){
                    JOptionPane.showMessageDialog(this,"Không tìm thấy khách hàng!");
                    
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhachHangPanel.class.getName()).log(Level.SEVERE,null,ex);
            }
        }
        btnTimkiem.setEnabled(false);
        txtTukhoa.setText("");
    }//GEN-LAST:event_btnTimkiemActionPerformed

    private void txtTukhoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTukhoaActionPerformed
        btnTimkiem.setEnabled(true);
    }//GEN-LAST:event_txtTukhoaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable KhachHangTable;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimkiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> comboboxTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radNam;
    private javax.swing.JRadioButton radNu;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtSdt;
    private javax.swing.JTextField txtTenKH;
    private javax.swing.JTextField txtTukhoa;
    // End of variables declaration//GEN-END:variables
}
